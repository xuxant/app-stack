pipeline {
    agent any

    environment {
        dockerImage = ''
        REGISTRY = '737971166371.dkr.ecr.us-east-1.amazonaws.com/dashboard'
        AWS_REGION = 'us-east-1'
        AWS_PROFILE = 'sohail'
        REGISTRY_CREDENTIALS = 'AWS-Access'
    }

     options {
        buildDiscarder(logRotator(numToKeepStr: '30'))
        timestamps()
        timeout(time: 30, unit: 'MINUTES')
        disableConcurrentBuilds()
    }

    stages {
        stage('Checkout & Environment Prep'){
            steps{
                script {
                    wrap([$class: 'AnsiColorBuildWrapper', colorMapName: 'xterm']){
                        withCredentials([
                            [ $class: 'AmazonWebServicesCredentialsBinding',
                                accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                                secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
                                credentialsId: 'AWS-Access',

                            ]])
                        {
                            try {
                                    echo "Setting Up Jump Instance."
                                    sh ("""
                                            aws configure --profile ${PROFILE} set aws_access_key_id ${AWS_ACCESS_KEY_ID}
                                            aws configure --profile ${PROFILE} set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
                                            aws configure --profile ${PROFILE} set region ${AWS_REGION}
                                            export AWS_PROFILE=${PROFILE}
                                    """)
                            } catch (ex) {
                                echo 'Err: Build Failed with Error: ' + ex.toString()
                                currentBuild.result = "UNSTABLE"
                            }
                        }
                        
                    }
                }
            }
        }

        stage('Build Image'){
            steps{

                script {
                    dir("react-dashboard"){
                        sh("""
                            echo "REACT_APP_BOOKURL=${REACT_APP_BOOKURL}" > .env
                            echo "REACT_APP_UserURL=${REACT_APP_UserURL}" >> .env
                            echo "REACT_APP_LibraryURL=${REACT_APP_LibraryURL}" >> .env
                        """)
                        dockerImage = docker.build("${REGISTRY}" + ":${env.BUILD_NUMBER}")
                    }
                }
            }
        }

        stage('Push Image'){
            steps {
                script {
                    docker.withRegistry("https://" + "${REGISTRY}", "ecr:us-east-1:" + "${REGISTRY_CREDENTIALS}") {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Deploy Image to Kubernetes'){
            steps {
                script{
                    wrap([$class: 'AnsiColorBuildWrapper', colorMapName: 'xterm']){
                        withCredentials([
                            [ $class: 'AmazonWebServicesCredentialsBinding',
                                accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                                secretKeyVariable: 'AWS_SECRET_ACCESS_KEY',
                                credentialsId: 'AWS-Access',

                            ]]) {
                                dir("k8s/deployment"){
                                    sh("""
                                    export REGISTRY=$REGISTRY
                                    export IMAGE_TAG=${env.BUILD_NUMBER}
                                    envsubst < ./dashboard.yaml | kubectl apply -f -
                                    """)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}